

--------------------------------------------------------------------------------------------------------------------------------------------
[].
---------------------------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------------------
[].
-------------------------------------------------------------------------------------------------------------------------------------------

1.typescript based opensource framework 
led by google
2.angular 14 released on junen 02 2022
3.JavaScript standard intended to ensure the interoperability of web pages
ECMAScript 6 I used 
now 12th edition is there
4.PWA- Pgrogressive web application - behave like it is a mobile application

Angular learning
--------------------------------------------------------------------
1. run this two command to connect azure devopp to angular 
getting 407 authentication proxy issue 
git config --global http.proxy http://xt32785@webproxy.cn.ca:1080
git config --global credential.helper wincred

2.nodejs comes with npm 
so once install node would 
3.node version comes with corrospond npm version 
4.npm install -g npm@6.9.0  to downgrade npm 
5.It seems like ng serve starts the embedded server whereas npm start starts the Node servers
6..npmrc is configurable file for npm 
   -configuration type user(c/user/xt32785/.npmrc), global(Appdata/npm/etc/.npmrc),project level(under root project), by built

7.content inside .npmrc
- registry = https://se-nexus01/cn.ca/repository/Azuer-Artifacts-CN-Proxy-npm/
strict-ssl =false
cafile = C:/Users/xt32785/Documents/certs/cn-ca.cer
proxy=
http-proxy= https://xt32785@webproxy.cn.ca:1080/

8.nexus repository manager is same as artifactory I used in sunlife
9.es5 is the 5th Edition; es6 / es2015 is the 6th Edition of ECMAScript; es7 / es2016 is the 7th Edition of ECMAScript
10.debugging
debugging support comes with nodejs 
if want to debug other launguage then many extention we have in angular
11.many thin console.log(""); 
npm run start 
create breakpoint trigget
debugge
add confuguration 
chrome launch
url change port to 4200
list launch chrome
rename lauch chrome 
create instance of chrome and look kfor breakpoints 
resume project loads 

[12]. global and local Angular cli version

it is necessary to have both a global and local install for the tools to work.

If you try to run ng serve on an application without the local install of the CLI (global install only), you will get the following error.

You have to be inside an Angular CLI project in order to use the serve command.

It will also print this message:

Please take the following steps to avoid issues:
"npm install --save-dev @angular/cli@latest" 

[13]. Folder structure in angular
1.app-everything resides
2.assert - where all  images are there
 environment- kinvey related configuration is there---TODO
 style -css files
 main.ts
   - hammer.js add more guesture  popup and other
   
 pollyfills - browser and application import, need some liberary to run application on browser 
 import classlist.js importing this is done in this file
3.lint- ng lint run linting tool checks quality of code in angular
4.package.json contains all basic infor about project and package.json.lock create automatically, generasted to allow subsequent installs describe exact tree

[14].angular ngFor
inside export class Heros
 heroes = HEROES;
const HEROES= [{id:1,name:'superman'},{id:2,name:'batman'},{id:3,name:'batgirl'}]

<table>
        <thead>
            <th>Name</th>
            <th>Index</th>
        </thead>
        <tbody>
            <tr *ngFor="let hero of heroes">
                <td>{{hero.name}}</td>
            </tr>
        </tbody>
    </table>

[15]ngclass
-directive, conditional style
[ngClass] = "'beginner'"
[ngClass] = "['begigner', 'course-card']" --arrray
[ngClass] = "{'beginner':true,'course-card':false}" 
threee way- string array object
instead create function -configuration object return string and array of string
[ngClass] =cardClass();

cardClass(){
return {
'beginner':false, instead of false
this.course.categorry == 'Beginner'
 'course-card':true
}
}

[16]@angular/core
provides core low level functionality to create component, service, decoratives
modeles

[17]change detector
after angualkr 2+ , change detector is impletemented
but if component expand , it takes more time 
one stratergy is to implement push 
whenever new thing is get pushed ,
it gets updated

[18]ngSwitch, ngSwitchCase, ngSwitchDefault
-ngIf- condition if want to add/remove 
two possiblities
if you want to add more category
-ngSwitch - categorial level

example--
<div [ngSwitch]="course.category">
<div *ngSwitchCase="'BEGINNER'">Beginner</div>
<div *ngSwitchCase="'INTERMEDIATE'">Beginner</div>
<div *ngSwitchDefault>for all levels</div> //for all levels 
--
db-data.ts

export const COURSES:any ={
{
id:1,
description:"",
category:'INTERMEDIATE',
lessioncount:10
}

}

[19]ng-container
-its good practice to place structural directive ngif asnd ngSwitch to ngcontainer

[20]ngStyle
-core directove
-css style directly 
plain css classes with conditionalty 
1.[style.text-decorator] = "'underlined'" //string //normal style not ngStyle
if you want to apply multiple style
ngStyle comes in picture

2.[ngStyle]="{'text-decoration':'undeline','':''}"
//return object
3.[ngStyle]="cardStyle()"
cardStyle{}
{
return {'text-decoration':'undeline','':''}
}  //call a function

[21].angular directives
component directive , directive with template
structural directive ngif,ngfor
1.<input disabled required> --attribute attach to element
custom directive 


[22].ng-template, ng-container, ngTemplateoutlet
-ng-template are powerful feature of angualar
1<div class="" *ngIf="">
</div>
<ng-template #loading>
</ng-template>
2.<ng-template [ngIf]="lessions" [ngIfElse]="loading">
<ng-template #loading>
</ng-template>


[23]Injectable in root
this is a good way to provide service through root 
in singleton way

[24].view child

--- --------------------------------------------
udemy- typescript
------------------------------------------------
1.npm i typescript install typescript compiler 
this will create tsconfig.json file which contins all basic configuration 
we can specify output directory for js file 
let message: string = "hello";
message += 'again';
console.log(message);

ts can be compiled to js by nodejs and browser and run 
npx tsc --watch  
tsc index.ts to compile that file 
if modification done recompile 
recompile on fly
>>giving to specific output location 
npx tsc --init --rootdir src --outdir lib

[2] . typescript is type safe as in javascript 
let message:string = 'message' insead of it '123' checks runtime 
but typescript will give compile type error

[3]. javascript has build in type
boolean number floating point 64 bits

let isPresent : boolean = false
let magic : number = 88.9;
let hello : string = 'world';
let notDefined : indefined = undefined (undefined, number etc is predefined type) 
let notPresent: null = null;
let penta : symbol = Symbol('star'); some universal idemtifier
let biggy : bigint =24n;

premetive type are lowercase types

[4]. support class anc built in class
regular expression class 
array class 
let regexp = new RegExp('ab+c');


[5]. npm install @types/node -
if getting issue regarding console.log()

[6].
import { NodeRuntime } from "inspector";

let message: string = 'mona';
console.log(message);


//inbuilt class
let regex : RegExp= new RegExp('ab+c');
let set : Set<number> = new Set([1,2,3]);
let array :Array<number> = [1,2,3];

/* first in and finrst out collection classes */
class Queue<T>  {
    data : Array<T> = [];
   push(item : T) {this.data.push(item);}
   pop() : T | undefined { return this.data.shift();}
}

/* how to use this classs */
let queue : Queue<number> = new Queue();
queue.pop();
queue.push(45.55);

console.log(queue.data);



//array
let array1 : number[] = [1,2,3];
array1 = [1,2,3];
//array1 = ['hello']; // error
//fix lengh array
let tuple : [number, number] = [0,0]  // if more than two is assigned get compile time error

//[4] object type and

let centre : {x:number , y : number} = {
    x :0,
    y:0,
};


/* 
  const and let differnece
  const re-assignment is not possible
  let reassigment is possible
*/

const point : {x:number , y: number} = {x:0 , y:0};
//point = {x:1 , y:1};  compile; time erorr

point.x = 123; //this way allow to add

/*[5] 
function 
*/
function add(a:number , b:number):number{
    return a+b;
}
/* function with no return type */
/* instead of number write void  */
/* fuction with multiple argument as a parameter */
function sum(...values){
    return values.reduce((previous, current) => {return previous + current;});

}

sum(1,2);
let c = sum(1,2,3);
console.log(c);


/* first class function --store function in variable */
let addition : (a:number,b:number) => number;

addition = function (a:number,b:number):number{
    return a+b;
}
/* arrow function */
addition = (a,b) => a+b;
console.log(addition);

/* structureal typeing */

/* universal typescript */
let name : any;
let name23 : unknown; 
name = 123;
name = 'mona';
let anothertyoe : number = name; // you can assign to strick type

//diffent but safer 
let unknown1 :unknown;
//unknown1.now() no any method is called from this
//let numberVariable : number = unknown1;  //gives compile time erorr

[6]. any is used for easy migration from javascript to typescript 

let name;
name = loadsctring();
console.log(name.trim());

so we can give annotated typescript 
let name: any;
if use unknown instead of any then give error on name.trim() 
because if number is added in name gives runtime error in trim 


[7].universal utilities
funciton log(value : any){    //any will decrease type safty use unknown
console.log(value.ofFixed(2)); //unknown gives error here
}

log(123.44)
log('mona'); //runtime error

[8]. type assertion
let hello = load();
if(typeof hello === 'string'){ //if not want to use for performanve then 
we have antoher type assertion 
const trimmed = (hello.string).trim() }
//give compilation if load return unknown


[9]type casting 
let leet;
leet = '1337';

const number = leet as number   //this would not work 

console.log(number === 1337)
console.log(number) //''1337

so const number = +leet; //now this is number

[10].module---import and export functionlaity
 export function add(a:number,b:number):number{
return a+b;
}

another file with same folder 
import {method name} from './utils'; (filename)

now console.log(add(2,3))

import * as util from './utils';
console.log(util.add(2,3));

[11].type declaration 
 declare const name:any;
declare keyword is used for it 
declaration dont allow defination 
declare const name:any = 'mona'; //compilation error
we can declare by index.d.ts file 

[12].creating npm package
mkdir palind
cd palind
npm init -y //generate package.json 
npm i typescript -D 
npx tsc --init --rootDir src --outDir lib --sourceMap --declaration --declarationMap //creaste tsconfig file
--index.ts
export function add(x:number, y:number):number{
return x+y;
}

--package.json
"main":"lib";
"types": "lib"
"scripts":{
"build" : "tsc"
}

then run npm run build
then four file will be generated 
sourcemap ,js , declaratino and declaration map
this is available with npm 
to use npm i palind


import {add} from 'palind';
console.log(add(2,3));

[13]. Async wait
const delay = (ms:number) =>new Promise(res => setTimeout(res,ms));

const mainfin = async() => {
    await delay(1000);
    console.log('1s');
    await delay(1000);
    console.log('1s');
    await delay(1000);
    console.log('1s');
}

mainfin();

[14]ts-node
instead of two line 
tsc index.ts and node index.js 
make one line npx ts-node src/index.ts

[15].lexical this

class person{
private _age:number;
constructor(_age:number){
  this._age = _age;
  }
growold(){ this.}

}
 
[16]. if primitive type is used
then typeof abc === ''
if class is used 
then abc instanceof ''
if type is used 
then 'size' in shape
 then shape.size * shape.sizze
 

[17].disrciminated union
in type if same name of property we have
still we can compare value field

type shape = Circle | square | ractangle

function area(shape:Shape){
if(shape.kind === 'square') //value checking

[18]. class parameter properties
duplication is removed 
and instead inside constructor add
public private protected asnd readonly

 --------------------------------------------------
maven
------------------------------------------------------
[1]

 --------------------------------------------------
Auzure DevOpp
------------------------------------------------------
1.learning pipeline
learning branching 



kinvey learning
----------------------------------------------------------
[1].serverless appllication development platform 
-provide many solution like data storage, data integration
-



redux learning
---------------------------------------------------------



Cololt and trip optimizer application learning
-------------------------------------------------
1.system that trach live inconvenience message 
-trainid----trainid----train id 
and combile 
2.angular--kinvey--microservices--databricks
3.redux is used by cobolt
4.timesheet 
sap- username xt32785
password Krishpatel135
CF503001 -O
CG29700-TDP
PWA --Access is still not given------WIP
mona.borisagar@cn.ca
Rushil#1112
5.need to contact 

nvm?
security not allowed 
node version not happened


--------------------------------------
ngxs
--------------------------------------
-library for angular
-state maangement in angular application 
1.store-folder 
2.action--class describing action to take
3.state-class defination of state
4.select-state slice selector
 

Angular Udemy note and searched concepted from chatgpt for better concept explaination(number simmilar to udemy number for concept)
--------------------------------------------------------------------------------------------------------------------------------------------
[].
---------------------------------------------------------------------------------------------------------------------------------------------

In Angular, dynamic inline style binding allows you to apply styles to an HTML element dynamically based on a component's properties or expressions. This is done using the `style` property binding.

---

### Syntax
```html
[style.property]="value"
```
- `property`: The CSS property you want to bind (e.g., `color`, `backgroundColor`, `fontSize`).
- `value`: The value assigned to the CSS property (can be dynamic).

Alternatively, you can use the `ngStyle` directive to bind multiple styles dynamically:
```html
[ngStyle]="stylesObject"
```
- `stylesObject`: An object where keys are CSS properties and values are the corresponding values.

---

### Example 1: Single Dynamic Style Binding
```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    <h1 [style.color]="textColor">Dynamic Inline Style Example</h1>
    <button (click)="changeColor()">Change Color</button>
  `,
  styles: []
})
export class AppComponent {
  textColor = 'blue';

  changeColor() {
    this.textColor = this.textColor === 'blue' ? 'red' : 'blue';
  }
}
```

#### **Explanation**:
1. `[style.color]="textColor"` dynamically binds the `color` style to the `textColor` property.
2. Clicking the button toggles the color between red and blue.

---

### Example 2: Multiple Dynamic Styles with `ngStyle`
```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    <div [ngStyle]="styles">
      This div has dynamic styles!
    </div>
    <button (click)="updateStyles()">Update Styles</button>
  `,
  styles: []
})
export class AppComponent {
  styles = {
    color: 'white',
    backgroundColor: 'green',
    fontSize: '20px',
  };

  updateStyles() {
    this.styles = {
      color: 'black',
      backgroundColor: 'yellow',
      fontSize: '25px',
    };
  }
}
```

#### **Explanation**:
1. `[ngStyle]="styles"` applies multiple styles using an object.
2. Clicking the button updates the styles dynamically.

---

### Example 3: Conditional Style Binding
```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    <p [style.fontWeight]="isBold ? 'bold' : 'normal'">
      This text toggles between bold and normal.
    </p>
    <button (click)="toggleBold()">Toggle Bold</button>
  `,
  styles: []
})
export class AppComponent {
  isBold = false;

  toggleBold() {
    this.isBold = !this.isBold;
  }
}
```

#### **Explanation**:
1. `[style.fontWeight]="isBold ? 'bold' : 'normal'"` conditionally applies the `fontWeight` style.
2. Clicking the button toggles between bold and normal styles.

---

### Advantages of Dynamic Inline Style Binding
1. **Flexibility**: Dynamically change styles based on logic or user interaction.
2. **Readable Code**: Keep your styles close to the template for simpler components.
3. **Dynamic Properties**: Bind directly to component properties or expressions.

By using either `[style.property]` or `[ngStyle]`, you can manage styles efficiently and make your components highly dynamic and interactive.
---------------------------------------------------------------------------------------------------------------------------------------------
[].
---------------------------------------------------------------------------------------------------------------------------------------------